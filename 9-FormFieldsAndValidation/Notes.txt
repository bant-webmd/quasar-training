----------------
ADD TASK - BUTTON & MODAL  
----------------
1) ADD BIG ROUND BUTTON AT THE BOTTOM OF THE LIST OF TASKS
    - This button will be used to create new tasks 
    - Put the code after the q-list on PageTodo 
    - SETTINGS: 
        color="primary"
        size="24px"
        icon="add"
    - Wrap the button in a div.absolute-bottom.text-center 
        - These two classes will help position the button at the bottom of the page and centered 
    - Add padding to the div with the Quasar margin classes 
        - EXAMPLES: q-mb-lg / q-mb-md 
2) ADD DIALOG MODAL 
    - Add Components: QDialog, QCard, QCardSection, QCardActions 
    - Add Directive: ClosePopup 
    - Grab markup for basic alert dialog 
        - Paste code at the bottom of the PageTodo 
    - SETTINGS: 
        v-model="showAddTask"
            - the v-model binding is used to show / hide the popup 
            - It should be boolean (not shown if false)
3) ADD CLICK HANDLER TO BUTTON
    - Set showAddTask to true if button is clicked 
4) MAKE Q-CARD ITS OWN CHILD COMPONENT OF Q-DIALOG 
    - Create Folder components/Tasks/Modals
    - Create AddTask.vue inside of this directory 
    - Set up child component in PageTodo.vue  



----------------
ADD TASK - CUSTOMIZE THE MODAL    
----------------
0) Set showAddTask to true for easy development 
1) ADD CLOSE BUTTON AT THE TOP: 
    - Grab Flat rounded button with an icon 
    - Put the code underneath the heading in the first card-section 
    - SETTINGS: 
        flat 
        round 
        dense
        icon="close"  
2) ADD STYLING: 
    - Put .row class on first q-card-section 
        - This will make everything appear on one line 
    - Put q-space component between button and "Add Task" header 
        - This will separate the items in a row 
3) ADD CLOSE POPUP DIRECTIVE: 
    - This is a built-in quasar directive to close the modal 
    - Add "ClosePopup" to directives in quasar.conf file 
    - EXAMPLE:  <q-btn v-close-popup flat label="OK" color="primary" />
4) Change OK button label to say "Save" 


----------------
ADD THE FIELDS 
----------------
1) CREATE DATA PROPERTY ON AddTask Component 
    EXAMPLE: 
        taskToSubmit: {
            name: '',
            dueDate: '',
            dueTime: '', 
            completed: false
        }
    - This will hold all the data bound to each form field we put on the card.  
2) INSTALL FORM FIELD COMPONENTS: 
    - QInput, QDate, QPopupProxy, QTime  
3) COPY INPUT CODE FROM DOCS: 
    - Use QInput the 'outlined' style one. 
    - SETTINGS: 
        outlined
        v-model="taskToSubmit.name" 
        label="Task name" 
    - Paste input code into 2nd q-card-section 
4) COPY DATE INPUT CODE FROM DOCS: 
    - Use the one that has "With QInput" 
    - Paste code under the name input but inside the same section 
    - SETTINGS: q-input
        outlined 
        v-model="taskToSubmit.dueDate" 
    - SETTINGS: q-date 
        v-model="taskToSubmit.dueDate"
5) COPY TIME PICKER CODE FROM DOCS: 
    - Use the one that has "With QInput" 
    - Paste code under the Date input 
    - SETTINGS: (get rid of mask and rules)
        outlined 
        v-model="taskToSubmit.dueTime"
6) SURROUND EACH QInput tag with a div.row.q-mb-sm 
    - Just done for styling some margin in between each input 
    - Afterwards add .col class to "task name" q-input 
7) ADD LABELS TO DATE AND TIME FIELDS 
    label="Due date"
    label="Due time"



----------------
FORM VALIDATION AND SUBMISSION (REGULAR <form>)
----------------
- We have to add validation before we send the data to the Vuex store 

- ADD VALIDATION ON THE "TASK NAME" INPUT: 
    - The field should be required. 
    - You can make it required by adding a "rules" prop 
    EXAMPLE: 
        :rules="[val => !!val || 'Field is required']"

- ADD SUBMIT FUNCTIONALITY: non q-form (with a regular form)
    - You should wrap all the fields in a QForm component 
    - Put the q-section (with the fields) and the q-card-actions inside of the q-form 
    - Create a method called submitForm() and trigger it via the form 
        - Make sure to add @submit.prevent to form 
        - This will prevent default "submit" event behavior 
    - Add type="submit" 
    SETTINGS: q-card-actions > q-btn 
        flat
        label="Save"
        color="primary"
        type="submit" 

- ADD MORE VALIDATION 
    - Add a ref to the "name" input 
        - When you access the Vue component through the ref you can access all of its data properties, methods, etc.
    - Then you can call validate() method inside of the submitForm() 
    method
        EXAMPLE: 
            <q-input ... ref="name">
        ...
            submitForm() {
                this.$refs.name.validate();
                if (!this.$refs.name.hasError) {
                    this.submitTask();
                }
            },
            submitTask() {
                // Submit task data to store                 
            }


----------------
FORM VALIDATION AND SUBMISSION (QForm & QField)
----------------
- By using QForm you can automatically trigger internal validation (:rules) upon @submit or @reset. 
    - To do this simply have a button in the form that has type="submit" or type="reset"

*** Alternatively, you can give the QForm a Vue ref name and call the validate and resetValidation functions directly on the whole form.

- You can also wrap custom controls in QField so that they have access to their own :rules prop which will then be triggered by QForm validation. 